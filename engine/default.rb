# >---------------------------------------------------------------------------<
# Based on a generator generated by RailsWizard. See http://railswizard.org    
# >---------------------------------------------------------------------------<

# >----------------------------[ Initial Setup ]------------------------------<

@recipes = ["capybara", "cucumber", "rspec"] 

def recipes; @recipes end
def recipe?(name); @recipes.include?(name) end

def say_custom(tag, text); say "\033[1m\033[36m" + tag.to_s.rjust(10) + "\033[0m" + "  #{text}" end
def say_recipe(name); say "\033[1m\033[36m" + "recipe".rjust(10) + "\033[0m" + "  Running #{name} recipe..." end
def say_wizard(text); say_custom(@current_recipe || 'wizard', text) end

def ask_wizard(question)
  ask "\033[1m\033[30m\033[46m" + (@current_recipe || "prompt").rjust(10) + "\033[0m\033[36m" + "  #{question}\033[0m"
end

def yes_wizard?(question)
  answer = ask_wizard(question + " \033[33m(y/n)\033[0m")
  case answer.downcase
    when "yes", "y"
      true
    when "no", "n"
      false
    else
      yes_wizard?(question)
  end
end

def no_wizard?(question); !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i| 
    values[(i + 1).to_s] = choice[1]
    say_custom (i + 1).to_s + ')', choice[0]
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@current_recipe = nil
@configs = {}

@after_blocks = []
def after_bundler(&block); @after_blocks << [@current_recipe, block]; end
@after_everything_blocks = []
def after_everything(&block); @after_everything_blocks << [@current_recipe, block]; end
@before_configs = {}
def before_config(&block); @before_configs[@current_recipe] = block; end


def engine_name
  unless @engine_name
#    require 'debugger'
#    debugger
    in_root do
      engine_spec = Gem::Specification.load Dir.entries('.').find { |file| file =~ /\.gemspec/i}
      @engine_name = engine_spec.name
    end
#    @engine_name = 'globalization'
  end
  @engine_name
end

# >---------------------------------[ RSpec ]---------------------------------<

@current_recipe = "rspec"
@before_configs["rspec"].call if @before_configs["rspec"]
say_recipe 'RSpec'


@configs[@current_recipe] = config

gem 'rspec-rails', group: [:development, :test]

# Add dependency to gemspec:
inject_into_file "#{engine_name}.gemspec", "\ts.add_development_dependency 'rspec-rails'\n", :before => /^end$/i

inject_into_file "lib/#{engine_name}/engine.rb", :after => /isolate_namespace (\w+)\s+/i do
  [
    "\t\t",
    "\t\tconfig.generators do |g|",
    "\t\t# Definir rspec como framework de pruebas, y evitar que genere pruebas para los templates de las vistas:",
    "\t\tg.test_framework    :rspec, view_specs: false, fixture: false",
    "\t\tg.integration_tool  :rspec",
    "\t\t\t",
    "\t\t\tg.assets false",
    "\t\t\tg.helper false",
    "\t\t\t",
    "\t\t\t# Definir FactoryGirl como \"fixture_replacement\":",
    "\t\t\tg.fixture_replacement :factory_girl, dir: 'spec/factories'",
    "\t\tend"
  ].join("\n") + "\n"
end

after_bundler do
  generate 'rspec:install'
  gsub_file 'spec/spec_helper.rb', '../../config/environment', '../../spec/dummy/config/environment'
end

# >-------------------------------[ Capybara ]--------------------------------<

@current_recipe = "capybara"
@before_configs["capybara"].call if @before_configs["capybara"]
say_recipe 'Capybara'


@configs[@current_recipe] = config

gem 'capybara', :group => [:development, :test]

# Add dependency to gemspec:
inject_into_file "#{engine_name}.gemspec", "\ts.add_development_dependency 'capybara'\n", :before => /^end$/i

after_bundler do
  create_file "spec/support/capybara.rb", <<-RUBY
require 'capybara/rails'
require 'capybara/rspec'
RUBY
end

# >---------------------------------[ Shoulda::Matchers ]---------------------------------<

@current_recipe = "shoulda-matchers"
@before_configs["shoulda-matchers"].call if @before_configs["shoulda-matchers"]
say_recipe 'Shoulda::Matchers'


@configs[@current_recipe] = config

gem 'shoulda-matchers', group: [:development, :test]

# Add dependency to gemspec:
inject_into_file "#{engine_name}.gemspec", "\ts.add_development_dependency 'shoulda-matchers'\n", :before => /^end$/i

after_bundler do
  inject_into_file "spec/spec_helper.rb", "require 'shoulda/matchers/integrations/rspec'\n", after: /^require '(.+)'\s$/i
end

# >---------------------------------[ FactoryGirl Rails ]---------------------------------<

@current_recipe = "factory_girl_rails"
@before_configs["factory_girl_rails"].call if @before_configs["factory_girl_rails"]
say_recipe 'factory_girl_rails'


@configs[@current_recipe] = config

gem 'factory_girl_rails', group: [:development, :test]

# Add dependency to gemspec:
inject_into_file "#{engine_name}.gemspec", "\ts.add_development_dependency 'factory_girl_rails'\n", before: /^end$/i

after_bundler do
  inject_into_file "spec/spec_helper.rb", "require 'factory_girl_rails'\n", after: /^require '(.+)'\s$/i
end

# >---------------------------------[ DatabaseCleaner ]---------------------------------<

@current_recipe = "database_cleaner"
@before_configs["database_cleaner"].call if @before_configs["database_cleaner"]
say_recipe 'database_cleaner'


@configs[@current_recipe] = config

gem 'database_cleaner', group: [:development, :test]

# Add dependency to gemspec:
inject_into_file "#{engine_name}.gemspec", "\ts.add_development_dependency 'database_cleaner'\n", before: /^end$/i

after_bundler do
  inject_into_file "spec/spec_helper.rb", "require 'database_cleaner'\n", after: /^require '(.+)'\s$/i
  inject_into_file "spec/spec_helper.rb", before: /^end$/i do
<<-RUBY

  config.before(:suite) do
    DatabaseCleaner.strategy = :truncation
  end
  config.before(:each) do
    DatabaseCleaner.start
  end
  config.after(:each) do
    DatabaseCleaner.clean
  end
RUBY
  end
end

@current_recipe = nil

# >-----------------------------[ Run Bundler ]-------------------------------<

say_wizard "Running Bundler install. This will take a while."
run 'bundle install'
say_wizard "Running after Bundler callbacks."
@after_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

@current_recipe = nil
say_wizard "Running after everything callbacks."
@after_everything_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}